
-- Coc
-- vim.api.nvim_set_keymap("n", "ga", "<Plug>(coc-codeaction-selected)", {silent = true, noremap = true})
-- vim.api.nvim_set_keymap("n", "gd", "<Plug>(coc-definition)", {silent = true})
-- vim.api.nvim_set_keymap("n", "gt", "<Plug>(coc-type-definition)", {silent = true})
-- vim.api.nvim_set_keymap("n", "gi", "<Plug>(coc-implementation)", {silent = true})
-- vim.api.nvim_set_keymap("n", "gr", "<Plug>(coc-references)", {silent = true})
-- vim.api.nvim_set_keymap("n", "K", ":call CocActionAsync('doHover')<CR>", {silent = true, noremap = true})

-- vim.api.nvim_set_keymap('n', '<M-.>', "<Plug>(coc-codeaction-selected)", {})
-- vim.api.nvim_set_keymap("i", "<C-Space>", "coc#refresh()", { silent = true, expr = true })
-- vim.api.nvim_set_keymap("i", "<TAB>", "pumvisible() ? '<C-n>' : '<TAB>'", {noremap = true, silent = true, expr = true})
-- vim.api.nvim_set_keymap("i", "<S-TAB>", "pumvisible() ? '<C-p>' : '<C-h>'", {noremap = true, expr = true})
-- vim.api.nvim_set_keymap("i", "<CR>", "pumvisible() ? coc#_select_confirm() : '<C-G>u<CR><C-R>=coc#on_enter()<CR>'", {silent = true, expr = true, noremap = true})

-- local actions = {
--   name = " ðŸš€ Actions |",
--   a = { "<Plug>(coc-fix-current)", "AutoFix"},
--   c = { "<Plug>(coc-codeaction-selected)", "Code action"},
--   r = { "<Plug>(coc-rename)", "Rename symbol"},
--   j = { ":call CocAction('diagnosticNext')<cr>", "Next error" },
--   k = { ":call CocAction('diagnosticPrevious')<cr>", "Previous error" },
--   m = { ":CocList marketplace<cr>", "Coc Marketplace" },
--   l = { ":CocCommand eslint.executeAutofix<CR>", "Auto fix" },
--   f = { ":CocCommand prettier.formatFile<CR>", "Format file" },
--   g = { "<cmd>lua require('telescope').extensions.git_worktree.git_worktrees()<CR>", "Git Worktree" },
--   ["."] = { "<Plug>(coc-codeaction-selected)", "Code Actions" }
-- }
