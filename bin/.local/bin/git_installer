#!/usr/bin/env bash

author=$1
repo=$2
arch="x86_64" # Replace with the desired architecture.

# parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
# Variables

function latest_rel() {
  # Get the JSON data for the latest release.
  latest_release=$(curl -s "https://api.github.com/repos/$1/releases/latest")

  # Check if the latest release data is valid JSON.
  if ! jq empty <<<"${latest_release}" >/dev/null 2>&1; then
    echo "Failed to fetch the latest release for repo: $1"
    exit 1
  fi

  # Extract the assets list from the release data.
  assets=$(echo "${latest_release}" | jq -c '.assets[]')

  # Loop over each asset in the assets list.
  while IFS= read -r asset; do
    # Extract the name of the asset.
    asset_name=$(echo "${asset}" | jq -r '.name')

    # Check if the asset name contains the architecture.
    if [[ "${asset_name}" == *"${arch}"* ]]; then
      # Extract the download URL for the asset.
      download_url=$(echo "${asset}" | jq -r '.browser_download_url')

      # Print the download URL.
      echo "${download_url}"
      exit 0
    fi
  done <<<"${assets}"

  # If we made it here, we didn't find an asset for the specified architecture.
  echo "No asset found for architecture: ${arch}"
  exit 1
}

function dl_and_install_bin() {

  # url=$1
  # binary_name=$2

  # Create tmp directory
  mkdir -p tmp

  # Change to tmp directory
  cd tmp

  # Get the filename and extension from the URL
  filename=$(basename $1)
  extension="${filename##*.}"

  # Download the binary archive
  wget $1

  # Extract the archive
  if [ "$extension" = "zip" ]; then
    unzip $filename
  elif [ "$extension" = "gz" ]; then
    tar -xvf $filename
  else
    echo "Unsupported file format: $extension"
    exit 1
  fi

  # Look for the binary in the root of the extracted folder and in a nested bin folder
  binary_path=$(find . -type f -name $2 -o -path "*/bin/$2")

  # Move the binary to ~/.local/bin
  mv $binary_path ~/.local/bin

  # Go back to the parent directory and remove the tmp directory
  cd ..
  rm -rf tmp
}

latest_release=$(latest_rel $author/$repo)
echo $latest_release
dl_and_install_bin $latest_release $repo
