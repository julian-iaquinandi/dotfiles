// Generated by KLFC 1.5.6
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key <TLDE> { [        grave,   asciitilde ] };
    key <AE01> { [            1,       exclam ] };
    key <AE02> { [            2,           at ] };
    key <AE03> { [            3,   numbersign ] };
    key <AE04> { [            4,       dollar ] };
    key <AE05> { [            5,      percent ] };
    key <AE06> { [            6,  asciicircum ] };
    key <AE07> { [            7,    ampersand ] };
    key <AE08> { [            8,     asterisk ] };
    key <AE09> { [            9,    parenleft ] };
    key <AE10> { [            0,   parenright ] };
    key <AE11> { [        minus,   underscore ] };
    key <AE12> { [        equal,         plus ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_SHIFT+EXTEND_ALPHABETIC";
    key <AD01> { [            q,            Q,       exclam,     question ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AD02> { [            w,            W,           at ] };
    key <AD03> { [            e,            E,   numbersign ] };
    key <AD04> { [            r,            R,   underscore ] };
    key <AD05> { [            t,            T,      percent ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AD06> { [            y,            Y,      percent,      percent ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AD07> { [            u,            U,            7,           F7,         Home ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK07>,clearMods=Shift+LevelThree) ] };
    key <AD08> { [            i,            I,            8,           F8,         Next ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK08>,clearMods=Shift+LevelThree) ] };
    key <AD09> { [            o,            O,            9,           F9,        Prior ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK09>,clearMods=Shift+LevelThree) ] };
    key <AD10> { [            p,            P,         plus,          F10,          End ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK10>,clearMods=Shift+LevelThree) ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <AD11> { [  bracketleft,    braceleft,    BackSpace ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AD12> { [ bracketright,   braceright ] };
    key <BKSL> { [    backslash,          bar ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AC01> { [            a,            A,     question ] };
    key <AC02> { [            s,            S,        grave ] };
    key <AC03> { [            d,            D,     quotedbl ] };
    key <AC04> { [            f,            F,   apostrophe ] };
    key <AC05> { [            g,            G,  asciicircum ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AC06> { [            h,            H,        equal,       dollar ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AC07> { [            j,            J,            4,           F4,         Left ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK04>,clearMods=Shift+LevelThree) ] };
    key <AC08> { [            k,            K,            5,           F5,         Down ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK05>,clearMods=Shift+LevelThree) ] };
    key <AC09> { [            l,            L,            6,           F6,           Up ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK06>,clearMods=Shift+LevelThree) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AC10> { [    semicolon,        colon,        minus,          F11,        Right ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK11>,clearMods=Shift+LevelThree) ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <AC11> { [   apostrophe,     quotedbl,       Return ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AB01> { [            z,            Z,          bar ] };
    key <AB02> { [            x,            X,  bracketleft ] };
    key <AB03> { [            c,            C,    braceleft ] };
    key <AB04> { [            v,            V,    parenleft ] };
    key <AB05> { [            b,            B,    ampersand ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_EXTEND_ALPHABETIC";
    key <AB06> { [            n,            N,            0,    backslash ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND_ALPHABETIC";
    key <AB07> { [            m,            M,            1,           F1,   parenright ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK01>,clearMods=Shift+LevelThree) ] };
    key.type[Group1] = "NONE_SHIFT_ALTGR_SHIFT+ALTGR_EXTEND";
    key <AB08> { [        comma,         less,            2,           F2,   braceright ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK02>,clearMods=Shift+LevelThree) ] };
    key <AB09> { [       period,      greater,            3,           F3, bracketright ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK03>,clearMods=Shift+LevelThree) ] };
    key <AB10> { [        slash,     question,     asterisk,          F12,   asciitilde ],
                 actions[Group1] = [ NoAction(), NoAction(), NoAction(), Redirect(key=<FK12>,clearMods=Shift+LevelThree) ] };
    key.type[Group1] = "ONE_LEVEL";
    key <RWIN> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
    include "level3(lalt_switch)"
};
